%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2470 1144
%%HiResBoundingBox: 0 0 2469.1199 1143.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2469.1199 1143.12 re
W
q
[0.24 0 0 -0.24 0 1143.12] cm
q
0 0 10287.499 4761.0537 re
W*
q
[37.139885 0 0 37.134281 1000.28186 982.28729] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
85.32 62.07 m
83.290344 63.573673 81.183678 64.960342 79 66.230003 c
78.459999 66.540001 77.919998 66.850006 77.370003 67.150002 c
77.170006 67.260002 l
77.060005 67.260002 l
76.990005 67.260002 l
76.890007 67.310005 l
76.750008 67.390007 76.570007 67.480003 76.37001 67.570007 c
75.938805 67.765663 75.49881 67.938995 75.050011 68.090004 c
74.570007 68.260002 74.050011 68.400002 73.570007 68.540001 c
72.534706 68.8116 71.488045 69.028267 70.430008 69.190002 c
69.350006 69.370003 68.240005 69.5 67.100006 69.600006 c
64.830009 69.800003 62.450005 69.880005 59.940006 69.920006 c
57.430008 69.960007 54.790005 69.980003 52.020004 70.060005 c
50.640003 70.060005 49.220005 70.170006 47.770004 70.270004 c
45.580006 70.450005 l
44.840004 70.520004 44.100006 70.610008 43.330006 70.720001 c
40.27948 71.159302 37.27948 71.825966 34.330006 72.720001 c
31.403002 73.575203 28.526335 74.575203 25.700005 75.720001 c
24.310005 76.290001 22.940004 76.880005 21.580006 77.489998 c
22.987688 78.917274 24.494398 80.230965 26.100138 81.431076 c
27.705879 82.631187 29.392502 83.704163 31.160006 84.649994 c
33.160004 83.649994 35.160004 82.649994 37.160004 81.819992 c
39.478195 80.838676 41.858196 80.042007 44.300003 79.429993 c
44.870003 79.289993 45.470001 79.149994 46.070004 79.029991 c
46.670006 78.909988 47.270004 78.799988 47.870003 78.699989 c
49.070004 78.48999 50.270004 78.319992 51.460003 78.169991 c
53.840004 77.859993 56.190002 77.639992 58.460003 77.37999 c
60.730003 77.119987 62.990002 76.859993 65.190002 76.479988 c
66.279999 76.279991 67.370003 76.05999 68.450005 75.789986 c
69.559174 75.519333 70.649178 75.185997 71.720001 74.789986 c
72.279999 74.589989 72.840004 74.359985 73.419998 74.099983 c
74.309998 73.659981 l
74.610001 73.509979 74.93 73.329979 75.309998 73.129982 c
75.683189 72.917 76.04319 72.68367 76.389999 72.429985 c
76.489998 72.369987 76.589996 72.279984 76.699997 72.209984 c
77 72.099998 l
77.089996 72.029999 l
77.159996 71.970001 l
77.259995 71.880005 l
77.449997 71.700005 l
79 70.220001 l
81.09333 68.220001 83.166664 66.193336 85.220001 64.139999 c
86.220001 63.07 87.309998 62 88.349998 60.91 c
88.510002 60.389999 88.650002 59.91 88.779999 59.34 c
87.639999 60.299999 86.486664 61.209999 85.32 62.07 c
h
f*
80.239998 49.110001 m
78.559998 49.049999 l
78.139999 49.049999 l
77.93 49.049999 l
77.769997 49.049999 l
77.579994 49.049999 77.349998 49.049999 77.119995 49.049999 c
76.119995 49.049999 75.119995 48.919998 73.979996 48.790001 c
71.769997 48.530003 69.439995 48.130001 67.039993 47.670002 c
64.639992 47.210003 62.169994 46.670002 59.609993 46.130001 c
57.049992 45.59 54.419994 45.02 51.709991 44.490002 c
50.349991 44.230003 48.979992 43.970001 47.57999 43.730003 c
45.459991 43.380005 l
44.39999 43.210007 l
43.299999 43 l
40.360001 42.599998 37.379997 42.369999 34.349998 42.259998 c
31.32 42.149998 28.259998 42.169998 25.16 42.259998 c
22.060001 42.349998 18.91 42.59 15.73 42.869999 c
13.98 43.02 12.219999 43.200001 10.459999 43.379997 c
10.153916 45.401814 10.000583 47.435146 9.999999 49.479996 c
10.002892 51.152893 10.106225 52.819561 10.31 54.479996 c
12.56 54.099995 14.75 53.729996 16.92 53.399994 c
19.92 52.919994 22.92 52.499992 25.85 52.159992 c
28.780001 51.819992 31.620001 51.569992 34.41 51.439991 c
37.199997 51.30999 39.93 51.249992 42.559998 51.359989 c
43.559998 51.359989 l
44.559998 51.359989 l
46.559998 51.479988 l
50.479996 51.789989 l
53.069996 52.019989 55.609997 52.279991 58.099995 52.519989 c
60.589993 52.759987 63.029995 52.999989 65.429993 53.169991 c
67.829987 53.339993 70.169991 53.449989 72.549995 53.419991 c
73.749992 53.419991 74.939995 53.359989 76.269997 53.209991 c
76.609993 53.209991 76.949997 53.12999 77.329994 53.05999 c
77.469994 53.05999 l
77.539993 53.05999 l
77.599991 53.05999 l
77.80999 52.999989 l
78.23999 52.889988 l
79.939987 52.429989 l
82.199989 51.82999 84.399986 51.21999 86.549988 50.62999 c
90.019989 49.62999 l
90.019989 49.389988 l
90.019989 49.149986 90.019989 48.909988 90.019989 48.669987 c
88.959991 48.779987 87.869987 48.859985 86.779991 48.909988 c
84.629997 49.150002 82.470001 49.169998 80.239998 49.110001 c
h
f*
79.080002 74.93 m
78.580002 75.389999 78.080002 75.840004 77.560005 76.279999 c
77.370003 76.449997 l
77.290001 76.519997 l
77.220001 76.579994 l
77.130005 76.659996 l
76.670006 77.029999 l
76.090004 77.43 l
75.460007 77.830002 l
75.020004 78.090004 74.560005 78.340004 74.090004 78.580002 c
73.150002 79.050003 72.150002 79.470001 71.090004 79.860001 c
70.030006 80.25 69.010002 80.590004 67.920006 80.860001 c
65.750008 81.5 63.460007 82.040001 61.060005 82.57 c
58.660004 83.099998 56.140007 83.57 53.550003 84.150002 c
52.260002 84.43 50.940002 84.709999 49.620003 85.020004 c
48.950005 85.170006 48.280003 85.320007 47.620003 85.490005 c
46.620003 85.730003 l
45.620003 86 l
43.510002 86.559998 41.410004 87.220001 39.340004 88 c
39.874531 88.147812 40.411896 88.284462 40.952099 88.40995 c
41.492306 88.535446 42.034885 88.649666 42.579834 88.752609 c
43.124783 88.85556 43.671631 88.947151 44.220387 89.027382 c
44.769142 89.10762 45.319324 89.17643 45.870941 89.233803 c
46.422554 89.291183 46.975121 89.337082 47.528641 89.371498 c
48.082161 89.405914 48.636158 89.428833 49.190628 89.440247 c
49.745098 89.451653 50.299568 89.451538 50.854038 89.439919 c
51.408508 89.428299 51.962494 89.405167 52.516003 89.370529 c
53.069511 89.335884 53.622059 89.289772 54.173645 89.232178 c
54.725235 89.174576 55.275391 89.105553 55.824116 89.025101 c
56.372841 88.944649 56.919655 88.852844 57.464561 88.74968 c
58.009468 88.646523 58.552002 88.532089 59.092159 88.40638 c
59.632317 88.280678 60.169628 88.143814 60.704098 87.995796 c
61.238571 87.847771 61.769737 87.688713 62.297604 87.518623 c
62.82547 87.348534 63.349575 87.167557 63.869919 86.9757 c
64.390266 86.783844 64.906403 86.581261 65.418327 86.367958 c
65.930252 86.154655 66.437531 85.930817 66.940163 85.696442 c
67.442795 85.462059 67.940338 85.217339 68.4328 84.962296 c
68.925262 84.707253 69.412216 84.442093 69.893669 84.166817 c
70.375114 83.891541 70.850639 83.606392 71.320244 83.311356 c
71.789841 83.016319 72.253113 82.71167 72.71006 82.397392 c
73.167007 82.083115 73.617226 81.759491 74.06073 81.426514 c
74.504234 81.093536 74.940636 80.751495 75.369934 80.400383 c
75.799225 80.049278 76.221046 79.689415 76.635391 79.320786 c
77.049736 78.952148 77.456245 78.575066 77.854919 78.189545 c
78.253593 77.804031 78.644089 77.4104 79.026421 77.008659 c
79.408745 76.606918 79.782562 76.197411 80.147873 75.780144 c
80.513191 75.362869 80.86969 74.938202 81.217361 74.506126 c
81.565033 74.074051 81.903587 73.634933 82.233017 73.188789 c
82.562447 72.742645 82.882477 72.289856 83.1931 71.830421 c
83.503723 71.370979 83.804672 70.905289 84.09594 70.43335 c
84.387222 69.961411 84.668571 69.483627 84.940002 69 c
82.980003 71.153336 81.026665 73.130005 79.080002 74.93 c
h
f*
80.290001 26.58 m
81.059998 27.24 l
81.839996 27.85 l
83.399994 29.09 l
84.029991 29.59 84.649994 30.09 85.269997 30.639999 c
84.93219 30.009638 84.577774 29.388763 84.206734 28.777376 c
83.835693 28.165989 83.44857 27.564962 83.045364 26.974298 c
82.642151 26.383633 82.223434 25.804174 81.789207 25.235924 c
81.35498 24.667673 80.905861 24.111443 80.441856 23.567236 c
79.977852 23.023026 79.499626 22.491615 79.007179 21.973007 c
78.514725 21.454397 78.008759 20.949329 77.489273 20.457808 c
76.96978 19.966282 76.437523 19.489004 75.892487 19.02597 c
75.34745 18.562939 74.790428 18.114815 74.221413 17.681601 c
73.65239 17.248386 73.072182 16.8307 72.480797 16.428545 c
71.88942 16.026388 71.287704 15.640337 70.675659 15.270391 c
70.063606 14.900444 69.442101 14.547133 68.811142 14.210457 c
68.180176 13.87378 67.540665 13.554221 66.892601 13.251779 c
66.24453 12.949335 65.588837 12.664441 64.925514 12.397098 c
64.262192 12.129754 63.592201 11.880343 62.915539 11.648866 c
62.238869 11.417387 61.556492 11.204172 60.868408 11.009221 c
60.180325 10.81427 59.487522 10.637863 58.790001 10.48 c
65.152763 14.665695 71.279427 19.172361 77.169998 24 c
80.290001 26.58 l
h
f*
82.650002 33.529999 m
81.080002 32.389999 l
80.82 32.209999 80.560005 32.009998 80.290001 31.83 c
79.489998 31.32 l
78.419998 30.639999 77.339996 29.959999 76.25 29.32 c
67.300163 23.813065 58.056831 18.853065 48.52 14.44 c
45.746666 13.16 42.943333 11.929999 40.110001 10.75 c
37.758297 11.35373 35.480816 12.165656 33.277557 13.185777 c
31.074297 14.205897 28.981777 15.417305 27 16.82 c
33.706669 18.539999 40.206669 20.423332 46.5 22.469999 c
56.357384 25.664175 66.024048 29.357508 75.5 33.549999 c
76.620003 34.049999 77.730003 34.549999 78.830002 35.059998 c
79.660004 35.439999 l
80.480003 35.759998 l
81.040001 35.969997 81.580002 36.189999 82.130005 36.419998 c
84.310005 37.299999 86.440002 38.246666 88.520004 39.259998 c
88.710007 39.359997 l
88.550003 38.729996 88.37001 38.119995 88.180008 37.509998 c
86.35334 36.209999 84.510002 34.883335 82.650002 33.529999 c
h
f*
87.760002 43.119999 m
85.68 42.459999 83.550003 41.73 81.380005 40.949997 c
79.740005 40.359997 l
78.920006 40.059998 l
78.110008 39.819996 l
74.740005 38.819996 l
70.180008 37.449997 65.410004 36.009995 60.460007 34.549995 c
57.980007 33.829994 55.460007 33.089996 52.880005 32.359997 c
49 31.26 l
47 30.719999 l
46 30.449999 l
45 30.189999 l
43.630001 29.869999 42.279999 29.559999 40.91 29.259998 c
36.779999 28.369999 l
34.013332 27.789999 31.196665 27.226665 28.329998 26.679998 c
25.119999 26.069998 21.859997 25.469997 18.549999 24.909998 c
17.337328 26.460609 16.245832 28.092278 15.27551 29.805002 c
14.305188 31.517729 13.466684 33.292728 12.759999 35.129997 c
17.540001 35.569996 22.206665 36.029999 26.759998 36.509998 c
29.759998 36.82 32.619999 37.139999 35.48 37.509998 c
39.720001 38.009998 l
41.110001 38.169998 42.5 38.34 43.84 38.519997 c
44.84 38.649998 l
45.84 38.799999 l
47.84 39.119999 l
51.84 39.77 l
59.439999 41 l
64.510002 41.830002 69.369995 42.619999 74.040001 43.32 c
77.520004 43.82 l
78.400002 43.939999 l
78.68 43.939999 78.970001 43.939999 79.25 43.989998 c
80.940002 44.089996 l
83.18 44.229996 85.366669 44.403328 87.5 44.609997 c
89.730003 44.839996 l
89.580002 43.689995 l
89 43.509998 88.370003 43.32 87.760002 43.119999 c
h
f*
85.940002 55.23 m
83.814476 56.052383 81.651138 56.759052 79.450005 57.349998 c
77.770004 57.779999 l
77.350006 57.879997 l
77.240005 57.879997 l
77.180008 57.879997 l
77.12001 57.879997 l
76.540009 58.029999 l
76.100006 58.119999 75.62001 58.199997 75.110008 58.27 c
74.600006 58.340004 74.110008 58.389999 73.550011 58.43 c
72.470009 58.52 71.360008 58.549999 70.230011 58.560001 c
69.100014 58.570004 67.920013 58.560001 66.750008 58.48 c
64.37001 58.369999 61.900009 58.169998 59.340008 57.939999 c
56.780006 57.709999 54.110008 57.439999 51.340008 57.219997 c
49.950008 57.099998 48.550007 56.999996 47.120007 56.909996 c
46.410007 56.909996 45.690006 56.819996 44.960007 56.789997 c
43.870007 56.789997 l
42.740005 56.789997 l
39.661808 56.734596 36.591808 56.867931 33.530006 57.189999 c
30.440006 57.509998 27.350006 58.009998 24.250008 58.629997 c
21.150009 59.249996 18 60 15 60.82 c
11.92 61.669998 l
12.492959 63.460804 13.188106 65.20285 14.00544 66.896141 c
14.822775 68.589432 15.754294 70.217384 16.799999 71.779999 c
18.559999 71.129997 l
21.309999 70.129997 24.039999 69.229996 26.75 68.43 c
29.460001 67.630005 32.169998 66.959999 34.830002 66.43 c
37.411961 65.915405 40.015293 65.555405 42.640003 65.349998 c
43.590004 65.290001 l
44.590004 65.290001 l
45.240005 65.290001 45.890003 65.230003 46.540005 65.200005 c
47.830006 65.200005 49.110004 65.120003 50.380005 65.100006 c
52.920006 65.100006 55.380005 65.100006 57.830006 65.020004 c
60.280006 64.940002 62.620007 64.940002 64.950005 64.800003 c
66.120003 64.730003 67.270004 64.639999 68.410004 64.510002 c
69.550003 64.380005 70.710007 64.209999 71.880005 63.990002 c
72.470001 63.870003 73.060005 63.740002 73.670006 63.59 c
74.280006 63.439999 74.900009 63.240002 75.590004 63 c
75.93 62.880001 76.290001 62.740002 76.68 62.57 c
76.830002 62.5 l
76.990005 62.43 l
77.140007 62.360001 l
77.250008 62.299999 l
77.670006 62.059998 l
79.330009 61.059998 l
81.540009 59.759998 83.710007 58.449997 85.830009 57.109997 c
87.163345 56.283329 88.466675 55.446663 89.740013 54.599998 c
89.860016 53.599998 l
88.529999 54.169998 87.25 54.720001 85.940002 55.23 c
h
f*
Q
q
[35.520546 0 0 35.515186 5226.0864 2399.7756] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
12.76 18.5 m
11.480001 19.6 9.860001 20.200001 8.06 20.200001 c
4.42 20.200001 0.900001 17.240002 0.900001 13.000001 c
0.900001 8.76 4.420001 5.800001 8.06 5.800001 c
9.84 5.800001 11.440001 6.400001 12.700001 7.460001 c
11.68 8.620001 l
10.700001 7.840001 9.440001 7.380001 8.18 7.380001 c
5.32 7.380001 2.62 9.700001 2.62 13.000001 c
2.62 16.300001 5.320001 18.620001 8.18 18.620001 c
9.46 18.620001 10.74 18.140001 11.72 17.34 c
12.76 18.5 l
h
25.98 20 m
24.539999 16.700001 l
17.059999 16.700001 l
15.619999 20 l
13.859999 20 l
20.099998 6 l
21.479998 6 l
27.739998 20 l
25.979998 20 l
25.98 20 l
h
17.68 15.3 m
23.92 15.3 l
20.799999 8.18 l
17.68 15.3 l
h
39.619999 20 m
37.82 20 l
34.279999 14.96 l
33.899998 14.96 l
30.999998 14.96 l
30.999998 20 l
29.339998 20 l
29.339998 6 l
33.899998 6 l
37.039997 6 38.859997 7.92 38.859997 10.520001 c
38.859997 12.520001 37.779995 14.08 35.859997 14.68 c
39.619999 20 l
h
31 7.56 m
31 13.48 l
33.860001 13.48 l
35.880001 13.48 37.200001 12.44 37.200001 10.52 c
37.200001 8.58 35.880001 7.56 33.860001 7.56 c
31 7.56 l
31 7.56 l
h
51.700001 20 m
49.900002 20 l
46.360001 14.96 l
45.98 14.96 l
43.079998 14.96 l
43.079998 20 l
41.419998 20 l
41.419998 6 l
45.98 6 l
49.119999 6 50.939999 7.92 50.939999 10.520001 c
50.939999 12.520001 49.859997 14.08 47.939999 14.68 c
51.700001 20 l
h
43.080002 7.56 m
43.080002 13.48 l
45.940002 13.48 l
47.960003 13.48 49.280003 12.44 49.280003 10.52 c
49.280003 8.58 47.960003 7.56 45.940002 7.56 c
43.080002 7.56 l
43.080002 7.56 l
h
55.16 18.440001 m
61.82 18.440001 l
61.82 20 l
54.759998 20 l
53.5 20 l
53.5 6 l
55.16 6 l
61.639999 6 l
61.639999 7.56 l
55.16 7.56 l
55.16 12.2 l
60.200001 12.2 l
60.200001 13.719999 l
55.16 13.719999 l
55.16 18.439999 l
55.16 18.440001 l
h
74.199997 20 m
72.399994 20 l
68.859993 14.96 l
68.479996 14.96 l
65.579994 14.96 l
65.579994 20 l
63.919994 20 l
63.919994 6 l
68.479996 6 l
71.619995 6 73.439995 7.92 73.439995 10.520001 c
73.439995 12.520001 72.359993 14.08 70.439995 14.68 c
74.199997 20 l
h
65.580002 7.56 m
65.580002 13.48 l
68.440002 13.48 l
70.459999 13.48 71.779999 12.44 71.779999 10.52 c
71.779999 8.58 70.459999 7.56 68.440002 7.56 c
65.580002 7.56 l
65.580002 7.56 l
h
87.32 20 m
85.879997 16.700001 l
78.399994 16.700001 l
76.959991 20 l
75.199989 20 l
81.439987 6 l
82.819984 6 l
89.079987 20 l
87.319984 20 l
87.32 20 l
h
79.019997 15.3 m
85.259995 15.3 l
82.139992 8.18 l
79.019997 15.3 l
h
92.339996 18.440001 m
98.619995 18.440001 l
98.619995 20 l
90.679993 20 l
90.679993 6 l
92.339996 6 l
92.339996 18.439999 l
92.339996 18.440001 l
h
102.279999 6 m
102.279999 20 l
100.619995 20 l
100.619995 6 l
102.279999 6 l
h
114.440002 6 m
116.100006 6 l
116.100006 20 l
114.820007 20 l
106.340012 9.04 l
106.340012 20 l
104.680008 20 l
104.680008 6 l
105.960007 6 l
114.440002 16.98 l
114.440002 6 l
h
127.660004 20 m
122.240005 13.46 l
120.200005 15.68 l
120.200005 20 l
118.500008 20 l
118.500008 6 l
120.200005 6 l
120.200005 13.5 l
127.020004 6 l
129.100006 6 l
123.280006 12.34 l
129.62001 20 l
127.660011 20 l
127.660004 20 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
